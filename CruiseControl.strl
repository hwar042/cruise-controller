% Main Module %
module CruiseControl:

% Inputs %
input On, Off, Resume, Set, QuickDecel, QuickAccel;
input Accel : float;
input Brake : float;
input Speed : float;

% Outputs %
output CruiseSpeed : float;
output Throttle : float;
output CruiseState : integer;
% 1:OFF 2:ON 3:STDBY 4:DISABLE %

signal state : integer in
	[loop
		present state then
			emit CruiseState(?state);
			end present;
			pause;
	end loop]
	||
    run CruiseFSM [ signal On/On_CSC;
                    signal Off/Off_CSC;
                    signal Resume/Resume_CSC;
                    signal Accel/Accel_CSC;
                    signal Brake/Brake_CSC;
                    signal state/State_CSC;
                    signal Speed/Speed_CSC ]
	||
	run CruiseSpeedController[ signal Set/Set_speed;
							   signal QuickAccel/QuickAccel_speed;
							   signal QuickDecel/QuickDecel_speed;
							   signal Accel/Accel_speed;
							   signal state/State_speed;
							   signal Speed/Speed_speed;
							   signal CruiseSpeed/CruiseSpeed_speed ]
	||
	run ThrottleController[ signal Accel/Accel_driving;
							signal CruiseSpeed/CruiseSpeed_driving;
							signal state/State_driving;
							signal Speed/Speed_driving;
							signal Throttle/Throttle_driving ]
end signal

end module

% SubModules %

module CruiseFSM:
constant PedalsMin : float;
constant SpeedMin : float;
constant SpeedMax : float;

input On_CSC;
input Off_CSC;
input Resume_CSC;
input Accel_CSC : float;
input Brake_CSC : float;
input Speed_CSC : float;

output State_CSC : integer;

    % OFF-1 ON-2 STDBY-3 DIS-4
    var state := 1 : integer in
        loop
            emit State_CSC(state);
            pause;
            trap T2 in %Look into traps

                % State - Off
                if state = 1 then
                    present On_CSC then
                        state := 2; exit T2;
                    end present;
                end if;

                % State - On
                if state = 2 then
                    present Off_CSC then 
                        state := 1;
                    end present;
                    if ?Accel_CSC > PedalsMin then
                        state := 4; 
                        exit T2;
                    end if;
                    if ?Speed_CSC < SpeedMin then
                        state := 4; 
                        exit T2;
                    end if;
                    if ?Speed_CSC > SpeedMax then
                        state := 4; 
                        exit T2;
                    end if;
                    if ?Brake_CSC > PedalsMin then
                        state := 3; 
                        exit T2;
                    end if;
                    exit T2;
                end if;

                % State - Standby
                if  state = 3 then
                    present Off_CSC then 
                        state :=1;
                    end present;
                    present Resume_CSC then
                        if (?Speed_CSC>SpeedMin) and (?Speed_CSC<SpeedMax) then
                            state := 2;
                            exit T2;
                        end if;
                        if ?Accel_CSC > PedalsMin then
                            state := 4; 
                            exit T2;
                        end if;
                        if ?Speed_CSC>SpeedMax then
                            state := 4; 
                            exit T2;
                        end if;
                        if ?Speed_CSC<SpeedMin then
                            state := 4; 
                            exit T2;
                        end if;
                    end present;
                    exit T2;
                end if;

                %State - Disable
                if state = 4 then
                    present Off_CSC then 
                        state :=1;
                    end present;
                    present On_CSC then
                         if (?Accel_CSC < PedalsMin) and (?Speed_CSC<SpeedMax) and (?Speed_CSC>SpeedMin) then
                            state := 2; 
                            exit T2;
                        end if;
                    end present;
                    exit T2;
                end if;
            end trap
        end loop
    end var
end module

module CruiseSpeedController:
    %{
        The cruising speed (CruiseSpeed) shall be managed only when the cruise control is enabled, meaning when it is in the ON, STBDY, or DISABLE states.
        The cruise speed shall be set to the current speed when the On button is pressed initially, and whenever the Set button is pressed thereafter.
        The cruise speed shall be increased by SpeedInc km/h when the QuickAccel button is pressed, provided that this new value of the cruise speed is still lower than the maximal speed, SpeedMax km/h.
        The cruise speed shall be decreased by SpeedInc km/h when the QuickDecel button is pressed, provided that this new value of the cruise speed is still higher than the minimal speed, SpeedMin km/h.
        The cruise speed shall be maintained between SpeedMin and SpeedMax km/h. This means that whenever an attempt is made to set the cruise speed (either through the On, Set, QuickAccel, or QuickDecel buttons) to a value less than SpeedMin or greater than SpeedMax, the cruise speed shall be limited to either SpeedMin or SpeedMax, respectively.
    }%

    % Constants %
    constant SpeedMin : float;
    constant SpeedMax : float;
    constant SpeedMinInc : float;
    constant SpeedMaxInc : float;
    constant SpeedInc : float;
    constant Zero : float;

    % Inputs %
    input Set_speed;
    input QuickAccel_speed;
    input QuickDecel_speed;
    input Accel_speed : float;
    input State_speed : integer;
    input Speed_speed : float;

    % Outputs %
    output CruiseSpeed_speed : float;

    var NewCruiseSpeed := Zero : float in
	loop
		emit CruiseSpeed_speed(NewCruiseSpeed);
		pause;
		trap T_speed in
			% Logic For When Cruise Control Off %
			if ?State_speed = 1 then
				NewCruiseSpeed := Zero;
				exit T_speed;
			% Logic For When Cruise Control On %
			else
				present Set_speed then
                    NewCruiseSpeed := ?Speed_speed;
                    exit T_speed;
				end present;
				present QuickAccel_speed then
					if NewCruiseSpeed < SpeedMaxInc then
						NewCruiseSpeed := NewCruiseSpeed + SpeedInc;
						exit T_speed;
					end if;
				end present;
				present QuickDecel_speed then
					if NewCruiseSpeed > SpeedMinInc then
						NewCruiseSpeed := NewCruiseSpeed - SpeedInc;
						exit T_speed;
					end if;
				end present;
				if ((?State_speed = 2) and (pre(?State_speed) = 1)) then
                    NewCruiseSpeed := ?Speed_speed;
                    exit T_speed;
				end if;
				exit T_speed;
			end if;
		end trap
	end loop
end var
end module

module ThrottleController:
    %{
        When the cruise control is off, the car speed shall be driven by the accelerator pedal.
        When the cruise control is on, the car speed shall be automatically regulated.
        The regulation shall be done using a proportional and integral algorithm, with Kp and Ki factors.
    }%

    % Inputs %
    input Accel_driving : float;
    input CruiseSpeed_driving : float;
    input State_driving : integer;
    input Speed_driving : float;
    output Throttle_driving : float;

    function regulateThrottle(integer, float, float) : float;

    loop
        pause;
        trap T_driving in
            if ?State_driving = 1 then
                emit Throttle_driving(?Accel_driving);
                exit T_driving;
            elsif ((?State_driving = 2) and (pre(?State_driving) = 1)) then
                emit Throttle_driving(regulateThrottle(1, ?CruiseSpeed_driving, ?Speed_driving));
                exit T_driving;
            elsif ?State_driving = 2 then
                emit Throttle_driving(regulateThrottle(0, ?CruiseSpeed_driving, ?Speed_driving));
                exit T_driving;
            else
                emit Throttle_driving(?Accel_driving);
                exit T_driving;
            end if;
        end trap
    end loop
end module
